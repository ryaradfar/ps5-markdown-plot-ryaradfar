## **hour, minute**: Time of scheduled departure broken into hour and minutes.
## **time_hour**: Scheduled date and hour of the flight as a POSIXct
##   date. Along with origin, can be used to join flights data to weather
##   data.
library(dplyr)
## ---------- load and check ----------
##  (8pt)
## Load the dataset.
##  (2pt)
flights <- read_delim("maindata/nycflights13.csv")
flights %>%
filter(dest == "MCO") %>%
filter(!is.na(arr_delay)) %>%
group_by(delay = FALSE) %>%
group_by(delay > 15) %>%
summarize(mean(distance/(air_time/60)))
### This problem set is somewhat similar to PS3, in a sense that
### you will work with real-world data.  However, this time
### you will answer much more complex questions with
### much more powerful tools.
### We expect you to use dplyr and pipes, but if you want to
### do it using different tools then feel free.
## Flights data
## Download the "nycflights13" dataset from canvas
## (note: we already used it in class).  The remainder
## of the questions are on that dataset.
## (You need to put it into a place where R can find it,
## but do not upload it to the repo.)
##
## The variables are:
##
## **year**, **month**, **day**: Date of departure.
## **dep_time**, **arr_time**: Actual departure and arrival times
##   (format HHMM or HMM), local tz.
## **sched_dep_time**, **sched_arr_time**: Scheduled departure and
##   arrival times (format HHMM or HMM), local tz.
## **dep_delay**, **arr_delay**: Departure and arrival delays, in
##   minutes. Negative times represent early departures/arrivals.
## **carrier**: Two letter carrier abbreviation. See airlines to get name.
## **flight**: Flight number.
## **tailnum**: Plane tail number. See planes for additional metadata.
## **origin, dest**: Origin and destination (3-letter airport codes).
##   See airports for additional metadata.
## **air_time**: Amount of time spent in the air, in minutes.
## **distance**: Distance between airports, in miles.
## **hour, minute**: Time of scheduled departure broken into hour and minutes.
## **time_hour**: Scheduled date and hour of the flight as a POSIXct
##   date. Along with origin, can be used to join flights data to weather
##   data.
library(dplyr)
## ---------- load and check ----------
##  (8pt)
## Load the dataset.
##  (2pt)
flights <- read_delim("maindata/nycflights13.csv")
## How many flights (rows) does it contain?
##   (1pt)
nrow(flights)
## What are the variable names in the dataset?
##   (1pt)
names(flights)
## Show a few random lines from the dataset.
##   (2pt)
View(flights)
head(flights)
## ---------- explore data ----------
##   (22pt)
## Which NYC airports are included in the data?
## Display their 3-letter codes
##   (3pt)
unique(flights$origin)
## How many destination airports are there?
##   (3pt)
length(unique(flights$dest))
## How many flights were there in 2013 from all NYC airports
## to Seattle (code 'SEA')?
##   (3pt)
sum(flights$dest == "SEA")
## Were the any flights from NYC to Spokane (GAG)?
##   (3pt)
flights %>%
summarize(n = sum(dest == "GAG"))
## Are there any missings among destinations?
##   (3pt)
sum(is.na(flights$dest))
## Are there any airport codes that are not three characters
## long?
##   (4pt)
flights %>%
summarize(n = sum(length(dest) != 3) | length(origin != 3))
## Are there any airport codes that contain digits?
##   (3pt)
flights %>%
filter(grepl("[[:digit:]]", origin)) %>%
summarize(n())
## ---------- Flights are delayed... ----------
##   (40pt)
##
## Flight delays are annoying.  Here we analyze arrival delays.
## How many missing arrical delay variables are there in data?
##   (3pt)
sum(is.na(flights$arr_delay))
## Are there any implausible values in the delay variable?
##   (3pt)
flights %>%
summarize(n = which.max(arr_delay), n = which.min(arr_delay))
## What is the average delay in these data?
##   (3pt)
flights %>%
summarize(n = mean(!is.na(arr_delay)))
## Now compute the delay by destinations.  Which ones are
## the worst three destinations in terms of the longest typical delay?
## Show the airport code and the average delay
##   (3pt)
flights %>%
group_by(dest) %>%
filter(!is.na(dest), !is.na(arr_delay)) %>%
summarize(delay = mean(arr_delay)) %>%
filter(rank(desc(delay)) < 4) %>%
head(3)
## Delays may be related to weather.  We do not have weather
## information in this dataset but let's analyze how it
## depends on month.  Compute (and display) the average delay by month.
##   (3pt)
flights %>%
group_by(month) %>%
select(arr_delay) %>%
filter(!is.na(arr_delay)) %>%
summarize(n = mean(arr_delay))
## Display the results as a plot: average delay as a function of month
## Base-R plotting is fine, but you can use other graphics libraries too
## Ensure to label your plot!
##   (3pt)
flights$month
flights$arr_delay
plot(flights$month, flights$arr_delay)
main = "Average Delay Each Month"
xlab = "Month"
ylab = "Average Delay"
## Explain what you see.  Are delay more common in summer or winter,
## spring or fall?
##   (3pt)
#Delays are more common in the fall and winter. This could be because
#colder, rainier weather usually leads to flights getting delayed
## Compute the average departure delay and average arrival delay
## for each airline (carrier).
## Make a scatterplot where the departure delay is on the horizontal
## and arrival delay on the vertical axis, and each point represents
## a different airline.
##   (5pt)
arr_delay_carrier <- flights %>%
group_by(carrier) %>%
select(arr_delay) %>%
filter(!is.na(arr_delay)) %>%
summarize(n = mean(arr_delay))
delay_carrier <- flights %>%
group_by(carrier) %>%
select(dep_delay) %>%
filter(!is.na(dep_delay)) %>%
summarize(n = mean(dep_delay))
plot(delay_carrier$n, arr_delay_carrier$n,
main = "Delay by Airline",
xlab = "departure delay",
ylab = "arrival delay",
pch = 1, cex = 1, col = "red")
## Compute average delay--average over departure and arrival delay
## From which airport (LGA, EWR, JFK)
## were the flights to Seattle delayed most (in average)?
##   (6pt)
flights %>%
group_by(origin) %>%
summarize(arrive_seattle = mean(arr_delay, na.rm = TRUE),
leave_seattle = mean(dep_delay, na.rm = TRUE)) %>%
arrange(desc(leave_seattle)) %>%
head(1)
## What percentage of flights from that airport to Seattle
## were delayed by more than 15 minutes?
##   (4pt)
flights %>%
filter(!is.na(arr_delay),
origin == "EWR", dest == "SEA") %>%
mutate(average = arr_delay > 15) %>%
summarize(sum(average)/length(arr_delay)*100)
## What were the top three destination (airport codes) from NYC in terms of
## the number of airlines (carriers)?
##   (4pt)
flights %>%
group_by(dest, carrier) %>%
summarize(total = length(carrier)) %>%
head(3)
## ---------- Lets fly to Orlando! ----------
##   (30pt)
## How many flights were there from NYC airports to Orlando in 2013?
## (airport code MCO)
##   (4pt)
flights %>%
summarize(o = sum(dest == "MCO")) %>%
pull(o)
## How many airlines (carriers) flew from NYC to Orlando?
##   (4pt)
flights %>%
filter(dest  == "MCO") %>%
summarize(c = n_distinct(carrier) ) %>%
pull()
## What airlines are these (find the 2-letter abbreviations)?  How
##  many times did each of these go to Orlando?
##  Print the table in the order of number of flights!
##    (4pt)
flights %>%
filter(dest  == "MCO") %>%
group_by(carrier) %>%
mutate(c = 1) %>%
summarize(c = sum(c)) %>%
arrange(-c)
## How many unique planes flew from NYC to Orlando?
##   Hint: airplane tail number is a unique identifier for the plane,
##   similar to the car license plate.
##     (4pt)
flights %>%
filter(dest == "MCO") %>%
group_by(n_distinct(tailnum)) %>%
summarize(n()) %>%
length()
## How many different airplanes arrived from each of the three NYC
##   airports to Orlando?
##     (4pt)
flights %>%
filter(dest == "MCO", origin == "JFK") %>%
group_by(n_distinct(tailnum)) %>%
count()
flights %>%
filter(dest == "MCO", origin == "LGA") %>%
group_by((n_distinct)(tailnum)) %>%
count()
flights %>%
filter(dest == "MCO", origin == "EWR") %>%
group_by(n_distinct(tailnum)) %>%
count()
## Compute the flight speed (using air time and distance), in mph
##   (not in miles per minute).
## How fast where the three fastest and the three slowest flights?
## Print the date and time, carrier, average delay,
## and speed (no other variables)
## Print them in the order of incresing speed
##   (5pt)
flights %>%
filter(!is.na(air_time), !is.na(arr_delay), !is.na(dep_delay)) %>%
group_by(flight) %>%
mutate(avg_delay = mean(arr_delay + dep_delay)) %>%
mutate(air_hrs = air_time/60) %>%
mutate(speed = distance/air_hrs) %>%
select(month, year, day, arr_time, dep_time, carrier, avg_delay, speed) %>%
arrange(desc(speed))
## Are the flight speed and arrival delay somehow related?
## Compute the average speed for delayed (> 15min) and not delayed
## flights.
## Comment what do you see
##   (5pt)
flights %>%
filter(dest == "MCO") %>%
filter(!is.na(arr_delay)) %>%
group_by(delay = FALSE) %>%
group_by(delay > 15) %>%
summarize(mean(distance/(air_time/60)))
#The flight speed and arrival delay are not related. Other conditions may
#affect arrival time more than flight speed
flights$month
flights$arr_delay
plot(flights$month, flights$arr_delay)
main = "Average Delay Each Month"
xlab = "Month"
ylab = "Average Delay"
plot(flights$month, flights$arr_delay)
main = "Average Delay Each Month"
xlab = "Month"
ylab = "Average Delay"
plot(flights$month, flights$arr_delay)
main = "Average Delay Each Month"
xlab = "Month"
ylab = "Average Delay"
x=c(4.2, 1.8, 2.6, 1, 5.6, 3.5, 9.2, 0.8, 8.7, 2.7, 8.9, 1.8, 4.5, 3.1, 7.4, 10.9, 0.5, 2.6, 9.5, 1.6, 4.7, 4.9, 5.8, 0.7, 1.8, 1)
x
y=c(9.2, 15.5, 12.7, 16, 14.5, 16.6, 9.5, 7.6, 11.4, 12.8, 10.8, 11.3, 12.9, 11, 13.3, 12.4, 10, 9.2, 15.2, 9.6, 13.5, 11.5, 16.6, 11.3, 8.9, 7.4)
y
boxplot(x, y)
plot(x, y)
ggplot(data) +
geom_bar(aes(party, col=party))
library(tidyverse)
library(tidyverse)
diamonds %>%
dim()
sample_n(10)
diamonds %>%
sample_n(10)
diamonds %>%
sample_n(10)
dim(diamonds)
d1000 <- diamonds %>%
```
d1000 <- diamonds %>%
sample_n(1000)
ggplot(d1000) +
geom_point(aes(x = carat, y = price))
ggplot(d1000) +
geom_point(aes(x = z, y = price))
ggplot(d1000) +
geom_point(aes(x = diamond price, y = price))
ggplot(d1000) +
geom_point(aes(x = diamond size, y = price))
ggplot(d1000) +
geom_point(aes(x = z, y = price))
```{r}
```{r}
```{r}
library(readr)
setwd("~/Desktop/INFO201/ps04-flights-ryaradfar")
setwd("~/Desktop/INFO201/ps04-flights-ryaradfar")
2. (2pt) Load data. How many rows/columns do we have?
getwd()
getwd()
2. (2pt) Load data. How many rows/columns do we have?
gapminder<- read_delim(gapminder.csv)
setwd("~/")
2. (2pt) Load data. How many rows/columns do we have?
gapminder<- read_delim(gapminder.csv)
getwd()
getwd()
``
getwd()
```{r}
1. (1pt) For solving the problems, and answering the questions, create a new rmarkdown docu-
```{r}
library(tidyverse)
getwd()
setwd("~/Desktop/INFO201/ps5-markdown-plot-ryaradfar")
gapminder = read_delim("gapminder.csv")
head(10)
```{r}
head(10)
gapminder %>%
head(10)
View(gapminder)
gapminder %>%
select("iso3") %>%
length()
gapminder %>%
select("iso3") %>%
unique()
gapminder %>%
select("iso3") %>%
unique() %>%
length()
gapminder %>%
select("iso3") %>%
group_by(country) %>%
length()
gapminder %>%
select("iso3") %>%
group_by(name) %>%
length()
gapminder %>%
select(iso3) %>%
length()
gapminder %>%
select(iso3) %>%
length()
gapminder %>%
select(iso3) %>%
summarize()
gapminder %>%
select(iso3) %>%
length()
gapminder %>%
select(name) %>%
length()
gapminder %>%
select(iso3) %>%
length()
gapminder %>%
filter(iso3) %>%
length()
gapminder %>%
select(iso3) %>%
length()
gapminder <- read_delim("gapminder.csv")
gapminder %>%
select(iso3) %>%
length()
gapminder %>%
select(iso3) %>%
count()
gapminder %>%
select(iso2) %>%
count()
gapminder %>%
summarize(n = n_distinct(iso2))
gapminder %>%
summarize(n = n_distinct(iso3))
gapminder %>%
summarize(n = n_distinct(name))
setwd("~/Desktop/INFO201/ps5-markdown-plot-ryaradfar")
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2)) %>%
filter(name_count > 1)
gapminder %>%
group_by(iso2) %>%
summarize(n_distinct(iso2)) %>%
filter(name_count > 1)
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2)) %>%
filter(name_count > 1)
gapminder %>%
nrow()
gapminder %>%
ncol()
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2)) %>%
filter(name_count > 1)
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2))
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2)) %>%
arrange(desc(name_count))
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(iso2)) %>%
arrange(name_count)
gapminder %>%
group_by(iso2) %>%
count()
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(name))
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(name)) %>%
arrange(name_count)
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(name)) %>%
arrange(desc(name_count))
gapminder %>%
group_by(iso3) %>%
summarize(name_count = n_distinct(name)) %>%
arrange(desc(name_count))
gapminder %>%
group_by(name) %>%
summarize(name_count = n_distinct(iso3)) %>%
arrange(desc(name_count))
gapminder %>%
group_by(name) %>%
summarize(name_count = n_distinct(iso3)) %>%
arrange(desc(name_count))
gapminder %>%
filter(is.na(name)) %>%
distinct(iso3)
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(name)) %>%
arrange(desc(name_count))
gapminder %>%
filter(is.na(name)) %>%
distinct(iso2)
gapminder %>%
group_by(iso2) %>%
summarize(name_count = n_distinct(name)) %>%
arrange(desc(name_count))
gapminder %>%
filter(is.na(iso2)) %>%
distinct(name)
gapminder %>%
group_by(name) %>%
summarize(name_count = n_distinct(iso3)) %>%
arrange(desc(name_count))
gapminder %>%
filter(is.na(name)) %>%
distinct(iso3)
gapminder %>%
summarise(min(year), max(year))
gapminder %>%
min(year)
gapminder %>%
min("year")
gapminder %>%
min(year)
```{r}
gapminder <- read_delim("gapminder.csv")
gapminder %>%
summarise(min_year = min(year), max_year = max(year))
gapminder %>%
select(year)
gapminder %>%
summarize(min_year = min(time), max_year = max(time))
gapminder %>%
select(time) %>%
summarize(min_year = min(time), max_year = max(time))
gapminder %>%
summarize(is.na(min_year = min(time), max_year = max(time)))
gapminder %>%
summarize(!is.na(min_year = min(time), max_year = max(time)))
gapminder %>%
summarize(is.na(min_year = min(time)))
gapminder %>%
summarize(is.na(min_year = min(time), max_year = max(time)))
gapminder %>%
summarize(is.na(min(time), max(time)))
